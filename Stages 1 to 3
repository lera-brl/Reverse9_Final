# === Stage: Technical Setup ===
from deepface import DeepFace
import cv2
import mediapipe as mp
import math
import time
import random
import numpy as np
from insightface.app import FaceAnalysis
from insightface.model_zoo import get_model

# Настройка MediaPipe FaceMesh
mp_face_mesh = mp.solutions.face_mesh
drawing = mp.solutions.drawing_utils
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1)

# Настройка FaceSwap
face_analyzer = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
face_analyzer.prepare(ctx_id=0)
swapper = get_model("InteractiveMirror9/models/inswapper_128.onnx", providers=['CPUExecutionProvider'])

# Настройка камеры
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1080)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1920)

# Размеры канваса и центра
frame_width = 1080
frame_height = 1920
center_x = frame_width // 2
center_y = frame_height // 2
oval_center = (center_x, center_y)
axes_length = (190, 270)

# === Stage: UIDesign ===
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
FONT = cv2.FONT_HERSHEY_TRIPLEX

HEADING_SIZE = 1.5
SUBHEADING_SIZE = 1.0
SMALL_UI_SIZE = 0.8

ui_texts = {
    "heading": {"text": "Show me how social media makes you feel?", "x": 120, "y": 100, "size": HEADING_SIZE, "color": BLACK},
    "align": {"text": "Align your face inside the oval", "x": 180, "y": 160, "size": SUBHEADING_SIZE, "color": BLACK},
    "auto": {"text": "A photo will be taken automatically.", "x": 160, "y": 200, "size": SUBHEADING_SIZE, "color": BLACK},
    "visible": {"text": "Keep your face fully visible.", "x": 80, "y": 880, "size": SMALL_UI_SIZE, "color": WHITE},
    "glasses": {"text": "No hair or glasses.", "x": 80, "y": 920, "size": SMALL_UI_SIZE, "color": WHITE},
    "snapshot": {"text": "Snapshot in", "x": 400, "y": 560, "size": HEADING_SIZE, "color": WHITE},
    "logo": {"text": "Reverse9", "x": 400, "y": 40, "size": SUBHEADING_SIZE, "color": BLACK}
}

# === Stage: Global State Variables ===
current_stage = 1
face_in_oval_start_time = None
snapshot_timer = None
snapshot_started = False
countdown_value = 9
photo_taken = False
captured_image = None
show_ui = True
show_white_labels = False  # Появляется только при первом входе 
white_labels_triggered = False

# === Stage: Helper Functions ===
def draw_text(frame, key):
    t = ui_texts[key]
    cv2.putText(frame, t["text"], (t["x"], t["y"]), FONT, t["size"], t["color"], 2)

def draw_facemesh(frame, results):
    if results.multi_face_landmarks:
        drawing.draw_landmarks(
            image=frame,
            landmark_list=results.multi_face_landmarks[0],
            connections=mp_face_mesh.FACEMESH_TESSELATION,
            landmark_drawing_spec=None,
            connection_drawing_spec=drawing.DrawingSpec(color=WHITE, thickness=1, circle_radius=1)
        )

def check_face_inside(results):
    if not results.multi_face_landmarks:
        return False
    points = [(int(p.x * frame_width), int(p.y * frame_height))
              for p in results.multi_face_landmarks[0].landmark]
    return all(((x - oval_center[0]) ** 2) / (axes_length[0] ** 2) +
               ((y - oval_center[1]) ** 2) / (axes_length[1] ** 2) <= 1 for (x, y) in points)

# === Stage 1: Start (Neutral) ===
def stage_1(frame, results):
    global current_stage, face_in_oval_start_time, white_labels_triggered, show_white_labels
    draw_text(frame, "heading")
    draw_text(frame, "align")
    draw_text(frame, "auto")
    draw_text(frame, "logo")
    cv2.ellipse(frame, oval_center, axes_length, 0, 0, 360, WHITE, 2)

    if white_labels_triggered:
        show_white_labels = True

    if show_white_labels:
        draw_text(frame, "visible")
        draw_text(frame, "glasses")

    if check_face_inside(results):
        if face_in_oval_start_time is None:
            face_in_oval_start_time = time.time()
        elif time.time() - face_in_oval_start_time >= 1:
            current_stage = 2
    else:
        face_in_oval_start_time = None


# === Stage 2: In Frame + Countdown ===
# === Stage 2: In Frame + Countdown ===
def stage_2(frame, results):
    global current_stage, snapshot_timer, snapshot_started, countdown_value
    global show_white_labels, white_labels_triggered  # обязательно глобальные переменные

    draw_text(frame, "heading")
    draw_text(frame, "logo")
    cv2.ellipse(frame, oval_center, axes_length, 0, 0, 360, WHITE, 2)
    draw_facemesh(frame, results)

    # Показываем белые надписи — даже если лицо вышло из овала
    if show_white_labels:
        draw_text(frame, "visible")
        draw_text(frame, "glasses")

    if check_face_inside(results):
        # Первый вход в овал — запускаем таймер
        if not snapshot_started:
            snapshot_timer = time.time()
            snapshot_started = True
            white_labels_triggered = True

        # Один раз активировали — продолжаем показывать
        if white_labels_triggered:
            show_white_labels = True

        # Отсчёт
        seconds_passed = time.time() - snapshot_timer
        countdown_value = max(0, 9 - int(seconds_passed))

        text = f"{ui_texts['snapshot']['text']} {countdown_value}"
        cv2.putText(frame, text, (ui_texts['snapshot']["x"], ui_texts['snapshot']["y"]),
                    FONT, ui_texts['snapshot']["size"], ui_texts['snapshot']["color"], 2)

        if countdown_value == 0:
            current_stage = 3

    else:
        # Зритель вышел — сброс таймера, но НЕ трогаем show_white_labels
        snapshot_started = False
        snapshot_timer = None
        countdown_value = 9
        current_stage = 1
        

# === Stage 3: Photo Captured + Flash ===
def stage_3_capture_and_flash_live_mask(frame, clean_frame, results):
    global current_stage, photo_taken, show_ui

    show_ui = False  # Временно скрываем UI

    # — Сохраняем чистое изображение —
    filename = "captured_face.png"
    cv2.imwrite(filename, clean_frame)

    # — Вспышка (мягкий белый оверлей) —
    flash_overlay = frame.copy()
    cv2.rectangle(flash_overlay, (0, 0), (1080, 1920), (255, 255, 255), -1)
    alpha = 0.8  # прозрачность вспышки
    blended = cv2.addWeighted(flash_overlay, alpha, frame, 1 - alpha, 0)

    # Показываем вспышку на 0.3 секунды
    cv2.imshow("Reverse9 Mirror", blended)
    cv2.waitKey(300)

    # — Возвращаем live-видео с маской на лице —
    draw_facemesh(frame, results)  # Маска остаётся
    current_stage = 4
    photo_taken = True
    show_ui = True


# === Stage: Main Loop ===
while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break

    frame = cv2.flip(frame, 1)
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb)
    clean_frame = frame.copy()

    if current_stage == 1:
        stage_1(frame, results)
    elif current_stage == 2:
        stage_2(frame, results)
    elif current_stage == 3:
        stage_3_capture_and_flash_live_mask(frame, clean_frame, results)

    canvas_frame = cv2.resize(frame, (1080, 1920))
    cv2.imshow("Reverse9 Mirror", canvas_frame)

    key = cv2.waitKey(5) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('n'):
        current_stage = 1
        snapshot_timer = None
        snapshot_started = False
        face_in_oval_start_time = None
        countdown_value = 9
        show_white_labels =False
        white_labels_triggered = False
    
    elif key == ord('t'):
        current_stage += 1

cv2.destroyAllWindows()
