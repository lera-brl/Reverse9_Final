import cv2
import mediapipe as mp
import math
import time

# MediaPipe
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1)

# Камера
cap = cv2.VideoCapture(0)
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))
print(f"Frame size: {frame_width}x{frame_height}")

# Центр круга
center_x = frame_width // 2
center_y = frame_height // 2
circle_radius = 180

message = ""
ready = False
countdown_started = False
timer_start = 0
timer_duration = 3
photo_taken = False

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)

    clean_frame = frame.copy()
    cv2.circle(frame, (center_x, center_y), circle_radius, (0, 255, 0), 2)

    ready = False

    if results.multi_face_landmarks:
        face_landmarks = results.multi_face_landmarks[0]
        mesh_points = [(int(p.x * frame_width), int(p.y * frame_height)) for p in face_landmarks.landmark]

        # Центр и размер лица
        face_x = (mesh_points[234][0] + mesh_points[454][0]) // 2
        face_y = (mesh_points[10][1] + mesh_points[152][1]) // 2
        face_width = abs(mesh_points[234][0] - mesh_points[454][0])
        face_height = abs(mesh_points[10][1] - mesh_points[152][1])

        # Проверка маски в круге
        all_inside = all(
            math.hypot(x - center_x, y - center_y) <= circle_radius for (x, y) in mesh_points
        )

        if all_inside:
            message = "Perfect! Hold still..."
            ready = True
        else:
            message = "Center your face"
            countdown_started = False

        # Нарисовать маску
        mp.solutions.drawing_utils.draw_landmarks(
            frame,
            face_landmarks,
            mp_face_mesh.FACEMESH_TESSELATION,
            landmark_drawing_spec=None,
            connection_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(color=(0, 255, 0), thickness=1)
        )

        # Запуск отсчёта
        if ready and not countdown_started:
            countdown_started = True
            timer_start = time.time()

        # Съёмка после 3 сек
        if countdown_started and not photo_taken:
            seconds_passed = time.time() - timer_start
            seconds_left = int(timer_duration - seconds_passed + 1)

            if seconds_passed < timer_duration:
                cv2.putText(frame, str(seconds_left), (center_x - 20, center_y - 100),
                            cv2.FONT_HERSHEY_SIMPLEX, 3, (0, 255, 0), 6)
            else:
                # Сохраняем фото из текущего кадра
                photo = clean_frame.copy()
                filename = "captured_face.png"
                cv2.imwrite(filename, photo)
                print(f"Photo captured: {filename}")
                print(f"Image size: {photo.shape[1]}x{photo.shape[0]}")
                print(f"Face size: width {face_width}px, height {face_height}px")

                # Показываем фото и замораживаем
                cap.release()
                cv2.imshow("Reverse9 Live", photo)
                photo_taken = True
                continue

    else:
        message = "Face not detected"
        countdown_started = False

    if message:
        cv2.putText(frame, message, (30, 60), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)

    cv2.imshow("Reverse9 Live", frame)

    if cv2.waitKey(5) & 0xFF in [27, ord('q')]:
        break

while photo_taken:
    if cv2.waitKey(5) & 0xFF in [27, ord('q')]:
        break

cv2.destroyAllWindows()
